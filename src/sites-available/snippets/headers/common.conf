## -----------------------------------------------------
## NGINX 1.x
## Headers directives for application
##
## @context server, location
## @module ngx_http_headers_module
## -----------------------------------------------------

#
# HTTP access control (CORS)
#
# The Access-Control-Allow-Origin response header indicates whether the response
# can be shared with resources with the given origin.
# The "*" wildcard, to tell browsers to allow ANY origin to access the resource.
#
add_header "Access-Control-Allow-Origin" "$scheme://$server_name";
#
# The Access-Control-Allow-Headers response header is used to indicate
# which HTTP headers can be used during the actual request.
# CORS-safelisted request headers are always allowed and hence usually aren't
# listed in Access-Control-Allow-Headers
#
#add_header "Access-Control-Allow-Headers" "Authorization,Origin,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Range";
#
# The Access-Control-Expose-Headers header lets a server whitelist headers
# that Javascript (such as getResponseHeader()) in browsers are allowed to access.
#
#add_header "Access-Control-Expose-Headers" "";
#
# The Access-Control-Max-Age response header indicates how long the results of a preflight request
# can be cached.
#
add_header "Access-Control-Max-Age" 240;
#
# A CORS preflight request is a CORS request that checks to see if the CORS protocol is understood and a server
# is aware using specific methods and headers.
# It is an OPTIONS request, using three HTTP request headers: Access-Control-Request-Method,
# Access-Control-Request-Headers, and the Origin header.
#
if ($request_method = 'OPTIONS') {
    # Send the HTTP 204 No Content status
    return 204;
}
#
# Cache headers (see conf.d/expires*.conf)
add_header Cache-Control $expires;
#
# The Referrer-Policy HTTP header controls how much referrer information (sent via the Referer header) should be
# included with requests.
# Setting an HTTP referer policy is for security. If these headers are being generated on the server and not
# controlled properly, sensitive meta-information about the incoming request can get passed from an HTTPS endpoint
# to a non-secure, HTTP one, nullifying the benefits of adding HTTPS encryption to your website.
#
add_header Referrer-Policy "no-referrer-when-downgrade, strict-origin-when-cross-origin" always;
#
# The X-Content-Type-Options response HTTP header is a marker used by the server to indicate that the MIME types
# advertised in the Content-Type headers should not be changed and be followed.
#
add_header X-Content-Type-Options "nosniff" always;
#
# X-XSS-Protection:
# The HTTP X-XSS-Protection response header is a feature of Internet Explorer, Chrome and Safari that stops pages
# from loading when they detect reflected cross-site scripting (XSS) attacks.
# If you do not need to support legacy browsers, it is recommended that you use Content-Security-Policy
# without allowing unsafe-inline scripts instead.
#
#add_header X-XSS-Protection $x_xss_protection always;
