## -----------------------------------------------------
## NGINX 1.x
## Directives for Content Security Policy configuration.
##
## @context server, location
## @module ngx_http_headers_module
## -----------------------------------------------------

#
# Content Security Policy (CSP)
# The HTTP Content-Security-Policy response header allows web site administrators to control resources the user
# agent is allowed to load for a given page. With a few exceptions, policies mostly involve specifying server
# origins and script endpoints. This helps guard against cross-site scripting attacks (XSS).
#
add_header Content-Security-Policy "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self';frame-ancestors 'self';require-trusted-types-for 'script'" always;

## -----------------------------------------------------
## Content Security Policy (CSP) Cheat Sheet
## -----------------------------------------------------

# Sources:
#                     <host-source>  - Internet hosts by name or IP address, as well as an optional URL scheme and/or port number.
#                   <scheme-source>  - A schema such as 'http:' or 'https:'. The colon is required, single quotes shouldn't be used.
#                            'self'  - Refers to the origin from which the protected document is being served, including the same URL scheme and port number.
#                   'unsafe-inline'  - Allows the use of inline resources, such as inline <script> elements, javascript:
#                                      URLs, inline event handlers, and inline <style> elements.
#                     'unsafe-eval'  - Allows the use of eval() and similar methods for creating code from strings.
#                            'none'  - Refers to the empty set; that is, no URLs match.
#            'nonce-<base64-value>'  - A whitelist for specific inline scripts using a cryptographic nonce (number used once).
# '<hash-algorithm>-<base64-value>'  - A sha256, sha384 or sha512 hash of scripts or styles.
#                  'strict-dynamic'  - The strict-dynamic source expression specifies that the trust explicitly given to
#                                      a script present in the markup, by accompanying it with a nonce or a hash, shall
#                                      be propagated to all the scripts loaded by that root script.
#
# Fetch directives:
# Fetch directives control locations from which certain resource types may be loaded.
#     default-src  - Serves as a fallback for the other fetch directives.
#     connect-src  - Restricts the URLs which can be loaded using script interfaces
#        font-src  - Specifies valid sources for fonts loaded using @font-face.
#       frame-src  - Specifies valid sources for nested browsing contexts loading using elements such as <frame> and <iframe>.
#         img-src  - Specifies valid sources of images and favicons.
#    manifest-src  - Specifies valid sources of application manifest files.
#       media-src  - Specifies valid sources for loading media using the <audio> , <video> and <track> elements.
#      object-src  - Specifies valid sources for the <object>, <embed>, and <applet> elements.
#      script-src  - Specifies valid sources for JavaScript.
#       style-src  - Specifies valid sources for stylesheets.
#      worker-src  - Specifies valid sources for Worker, SharedWorker, or ServiceWorker scripts.
#
# Document directives:
# Document directives govern the properties of a document or worker environment to which a policy applies.
#        base-uri  - Restricts the URLs which can be used in a document's <base> element.
#    plugin-types  - Restricts the set of plugins that can be embedded into a document by limiting the types of resources which can be loaded.
#         sandbox  - Enables a sandbox for the requested resource similar to the <iframe> sandbox attribute.
#
# Navigation directives:
# Navigation directives govern to which location a user can navigate to or submit a form to, for example.
#        form-action  - Restricts the URLs which can be used as the target of a form submissions from a given context.
#    frame-ancestors  - Specifies valid parents that may embed a page using <frame>, <iframe>, <object>, <embed>, or <applet>.
#
# Other directives:
#      block-all-mixed-content  - Prevents loading any assets using HTTP when the page is loaded using HTTPS.
#              require-sri-for  - Requires the use of SRI for scripts or styles on the page.
#    upgrade-insecure-requests  - Instructs user agents to treat all of a site's insecure URLs (those served over HTTP)
#                                 as though they have been replaced with secure URLs (those served over HTTPS).
#                                 This directive is intended for web sites with large numbers of insecure legacy URLs
#                                 that need to be rewritten.
#
# Aiming for default-src https: is a great first goal, as it disables inline code and requires https.
# For existing websites with large codebases that would require too much work to disable inline scripts,
#     default-src https: 'unsafe-inline' is still helpful, as it keeps resources from being accidentally loaded over http. However, it does not provide any XSS protection.
# It is recommended to start with a reasonably locked down policy such as default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self' and then add in sources as revealed during testing.
# In lieu of the preferred HTTP header, pages can instead include a <meta http-equiv=“Content-Security-Policy” content=“…”> tag. If they do, it should be the first <meta> tag that appears inside <head>.
# Care needs to be taken with data: URIs, as these are unsafe inside script-src and object-src (or inherited from default-src).
# Similarly, the use of script-src 'self' can be unsafe for sites with JSONP endpoints. These sites should use a script-src that includes the path to their JavaScript source folder(s).
# Unless sites need the ability to execute plugins such as Flash or Silverlight, they should disable their execution with object-src 'none'.
# Sites should ideally use the report-uri directive, which POSTs JSON reports about CSP violations that do occur. This allows CSP violations to be caught and repaired quickly.
# Prior to implementation, it is recommended to use the Content-Security-Policy-Report-Only HTTP header, to see if any violations would have occurred with that policy.
